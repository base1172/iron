#!/bin/bash --

export IRON_TEST_DIR=$(cd $(dirname $BASH_SOURCE)/.. && pwd)
export IRON_TEST_ROOT=$(cd $IRON_TEST_DIR/.. && pwd)
export IRON_TEST_BIN=$IRON_TEST_DIR/../bin
alias sexp="$(which sexp)"
export PATH=$IRON_TEST_DIR/bin:/usr/bin:/bin
export TERM=xterm
export COLUMNS=90

# Unset IRON_CONFIG so that we don't unintentionally connect to the prod server.
unset IRON_CONFIG

# We reset HGRCPATH so we *only* pick up the locked-down one we use
# for testing.  This relies on a change that we made to run-tests.py,
# so that it extends the HGRCPATH rather than overwriting it.  I.e.,
# from:
#
#    HGRCPATH = os.environ["HGRCPATH"] = os.path.join(HGTMP, '.hgrc')
#
# to:
#
#    HGRCPATH = os.path.join(HGTMP, '.hgrc')
#    os.environ["HGRCPATH"] = os.environ["HGRCPATH"] + ":" + HGRCPATH
export HGRCPATH=$IRON_TEST_DIR/etc/hgrc

# The Iron executable looks at IRON_FUNCTIONAL_TESTING, and if it is set, behaves a
# little differently so that functional tests work and are repeatable.
export IRON_FUNCTIONAL_TESTING=

export HGUSER=unix-login-for-testing

function exit_trap {
    trap - EXIT; internal_end_test
}

export -f exit_trap

export IRON_MODE=dev
export FE_EXE_BEFORE_COPY=$IRON_TEST_DIR/../bin/fe.exe

function setup_test {
    set -u -o pipefail
    case $- in
        *i*)
            ;;
        *)
            # For non-interactive shells, we want to stop at the first error.  For
            # an interactive shell, that would exit the shell, so we don't.
            set -e
            ;;
    esac
    export IRON_OPTIONS='((display_ascii_always true))'
    export IRON_APPDIR=$IRON_TEST_DIR/appdir
    rm -rf $IRON_APPDIR
    mkdir -p $IRON_APPDIR

    # We put fe.exe in IRON_APPDIRS, which is ignored by jenga, so that
    # jenga won't delete it.
    export FE_EXE=$IRON_APPDIR/fe.exe

    # Here we save fe.exe so jenga can't change the executable from under running tests.
    # We shouldn't put fe.exe in bin/, because of the dependency on (files_recursively_in bin)
    # in the jbuild (I think tests would be run twice all the time).
    # Hopefully, this should fix issues where the tests leak fe servers.
    cp --dereference $FE_EXE_BEFORE_COPY $FE_EXE
}

export -f setup_test

function start_test {
    setup_test
    export IRON_BASEDIR=$IRON_APPDIR/$IRON_MODE
    mkdir -p $IRON_BASEDIR/{etc,export,var}
    IRON_HGRC=$IRON_BASEDIR/etc/hgrc
    cp $IRON_TEST_DIR/../hg/hgrc $IRON_HGRC
    chmod u+w $IRON_HGRC
    # Fix the date in commit messages for repeatability.
    cat >>$IRON_HGRC <<EOF
[defaults]
commit=--date "0 0"
EOF
    IRON_CONFIG_PATH=$IRON_BASEDIR/etc/iron-config.sexp
    cat >$IRON_CONFIG_PATH <<EOF
((host localhost)
 (async_rpc_port (dynamic $IRON_BASEDIR/var/server-listening-on-port))
 (rpc_proxy_config ())
 (hgrc $IRON_HGRC)
 (hydra_user as-hydra)
)
EOF
    export IRON_CONFIG="$(cat $IRON_CONFIG_PATH)"		
    trap 'exit_trap' EXIT
    fe-server start
    fe admin users update-valid-users-and-aliases -stdin <<EOF
((username jdoe1))
((username jdoe2))
((username jdoe3))
((username jdoe4))
((username a))
((username b))
((username c))
((username file-follower))
((username file-owner))
((username owner))
((username new-owner))
((username seconder))
((username unix-login-for-testing))
((username user))
((username user1))
((username user2))
((username user3))
((username this-user-has-only-this-cr-soon))
EOF
    fe admin users refresh-existing-users
    # We use variables for CR and XCR so that we can write CRs in
    # tests that don't look like CRs in the source.
    CR=CR
    XCR=XCR
    set +e
		
    # temporarily enable workspace for all tests to check things out
    export HOME=${TMPDIR}$IRON_TEST_ROOT/home
    mkdir -p $HOME/workspaces
    echo "(workspaces ((basedir $HOME/workspaces)))" > $HOME/.ferc

    # Bring in the bashrc that we distribute for use with iron.
    source $IRON_TEST_BIN/bashrc
    # Reset the variable in case the USER running the test has it defined in
    # their environment.
    OLD_CDF_FEATURE=""
}

export -f start_test

function internal_end_test {
    fe internal dump state >/dev/null
    fe internal cached-attributes errors get
    fe internal timed-events errors get
    fe-server stop
}

export -f internal_end_test

function sub {
    sed -e "s/$1/$2/g"
}

export -f sub

function stabilize_home {
    cat /dev/stdin | sed -e "s;$HOME;\$HOME;"
}

export -f stabilize_home

function stabilize_uuids {
		local uuid_regex='[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'

    cat /dev/stdin \
        | sed --regexp-extended -e "s/${uuid_regex}/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/g"
}

export -f stabilize_uuids

function stabilize_timestamps {
		local timestamp_regex1='[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{9}\+[0-9]{2}:[0-9]{2}'
		local timestamp_regex2='[A-Z][a-z]{2} [A-Z][a-z]{2} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{4} \+[0-9]{4}'

    cat /dev/stdin \
				| sed --regexp-extended -e "s/${timestamp_regex1}/yyyy-mm-dd hh:mm:ss.xxxxxxxxx+hh:mm/g" \
				| sed --regexp-extended -e "s/${timestamp_regex2}/Day Mon dd yy hh:mm:ss yyyy +hhmm/g" \
        | perl -0777 -pe 's/(\| |\(")pending for("?) [0-9.]+[a-z]+(\)| +\|)/\1pending for\2 \{ELIDED\}\3/g'
}

export -f stabilize_timestamps

function stabilize_output {    
    local input="$(cat /dev/stdin)"
    while read s; do
        input=$(echo "$input" | sed -e "$s")
    done <<<$(hg log --template 's/{node|short}/\{REVISION {rev}}/g\n')
    echo "$input" \
        | stabilize_home \
        | stabilize_timestamps \
        | stabilize_uuids 
}

export -f stabilize_output

function sanitize_output {
		local uuid_regex='[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
		local timestamp_regex1='[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{9}\+[0-9]{2}:[0-9]{2}'
		local timestamp_regex2='[A-Z][a-z]{2} [A-Z][a-z]{2} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{4} \+[0-9]{4}'
    cat /dev/stdin \
				| sed --regexp-extended -e "s/${uuid_regex}/{ELIDED}                            /g" \
				| sed --regexp-extended -e "s/${timestamp_regex1}/{ELIDED}                           /g" \
				| sed --regexp-extended -e "s/${timestamp_regex2}/{ELIDED}                            /g" \
				| sed --regexp-extended -e 's/revision ([0-9a-f]{40}|[0-9a-f]{12})/revision {ELIDED}/g' \
				| sed --regexp-extended -e 's/\(([0-9a-f]{40}|[0-9a-f]{12})\)/({ELIDED})/g' \
				| sed --regexp-extended -e 's/^[0-9a-f]{12} tip /{ELIDED}     tip /g' \
				| sed --regexp-extended -e 's/\[[0-9a-f]{12}\]/[  {ELIDED}  ]/g' \
				| sed --regexp-extended -e 's/^[0-9a-f]{40}$/{ELIDED}/g' \
        | sed --regexp-extended -e 's/ [0-9.]+[a-z]+ ago/ \{ELIDED\} ago/g' \
				| perl -0777 -pe 's/(base |old tip |new tip |[0-9]+:| )[0-9a-f]{12}(\n|\)|\.| )/\1\{ELIDED\}    \2/g' \
				| perl -0777 -pe 's/(base |old tip |new tip |[0-9]+:| )[0-9a-f]{40}(\n|\)|\.| )/\1\{ELIDED\}                            \2/g' \
				| perl -0777 -pe 's/(\| +)[0-9a-f]{12}( +\|)/\1\{ELIDED\}    \2/g' \
				| perl -0777 -pe 's/(\| +)[0-9a-f]{40}( +\|)/\1\{ELIDED\}                                \2/g' \
        | perl -0777 -pe 's/(\| |\(")pending for("?) [0-9.]+[a-z]+(\)| +\|)/\1pending for\2 \{ELIDED\}\3/g'
}

export -f sanitize_output

function single_space {
    while read line ; do
        echo ${line} | xargs echo
    done
}

export -f single_space

function matches {
    stdin="$(cat /dev/stdin)"
    if echo "$stdin" | tr '\n' ' ' | grep -q "$@"; then
        :
    elif [ -z "$stdin" ] ; then
        echo "<empty output (no matches)>"
    else
        echo "$stdin"
    fi
}

export -f matches

function prepare_sample_repo {
    # .fe.sexp files in the jane repo are for review of jane.  dot-fe.sexp files are for
    # the test.
    find . -name .fe.sexp | xargs -r rm
    find . -name dot-fe.sexp \
        | while read dot_fe; do
        (
            cd $(dirname $dot_fe)
            mv dot-fe.sexp .fe.sexp
        )
    done
    # 2017-03-14: Jenga's (Files_recursively_in ...) does not include
    # subdirectories with leading dots. This transformation is needed to get the
    # .fe directory through jenga's sandboxing.
    find . -name dot_fe \
        | while read dot_fe; do
        (
            cd $(dirname $dot_fe)
            mv dot_fe .fe
        )
    done
}

export -f prepare_sample_repo

function copy_sample_repo {
    cp --dereference -r $IRON_TEST_DIR/sample-repos/$1 $2
    chmod u+w --recursive $2
    (cd $2; prepare_sample_repo)
}

export -f copy_sample_repo

function cat_then_truncate {
    cat ${dump_file}
    truncate --size 0 ${dump_file}
}

export -f cat_then_truncate

function path_and_next_step {
    sexp query "(pipe (variant Updated) (index 1) (cat (field feature_path) (field next_steps)))"
}

export -f path_and_next_step

function tip_rev {
    hg tip --template='{node|short}'
}

export -f tip_rev

function tip_full_rev {
    hg tip --template '{node}'
}

export -f tip_full_rev

function setup_repo_without_root {
    hg init repo
    cd repo
    if [ $# -ne 0 ]; then
        for i in "$@"; do
            mkdir -p $(dirname "$i")
            echo "$i" > "$i"
        done
        hg -q addremove
        hg -q commit -m init
    else
        touch foo
        hg -q addremove
        hg -q commit -m dummy
        hg rm foo
        hg -q commit --amend -m init
fi
}

export -f setup_repo_without_root

function setup_repo_and_root {
    setup_repo_without_root "$@"
    fe create root -d root -permanent -remote-repo-path "$PWD"
}

export -f setup_repo_and_root

function setup_sample_repo_and_root {
    copy_sample_repo "$1" ./repo
    cd repo
    hg init
    hg -q addremove
    hg -q commit -m init
    fe create root -d root -permanent -remote-repo-path "$PWD"
}

export -f setup_sample_repo_and_root

# Does magic to inform hydra and hence test server of feature updates.
# - $1 feature name
# - remaining args, if any, are passed to the [fe internal hydra] command.
# Note: Does an hg up in the process of executing.
function feature_to_server {
    local feature_name="$1"
    shift
    hg up -q -r "$feature_name"
    IRON_USER=as-hydra-test BOOKMARK="$feature_name" fe internal hydra "$@"
    hg up -q -r "$feature_name"
}

export -f feature_to_server

function make_scaffold_repo {
    copy_sample_repo two-users $1
    cd $1
    hg init
    rm .fe/obligations-global.sexp
    hg add a b .fe/obligations-repo.sexp .fe/.fe.sexp .fe.sexp
    hg commit -m 0
}

export -f make_scaffold_repo

function add_file {
    content="$1"
    filename=$content.txt
    echo "$content" > "$filename"
    hg add "$filename"
    hg commit -q -m "$content"
}

export -f add_file

function create_local_clone {
    cd ..
    rm -rf local-clone
    hg clone -q repo local-clone "$@"
    cd local-clone
}

export -f create_local_clone

function parent_is {
    [ "$(hg parent --template={node})" = "$1" ]
}

export -f parent_is

function is_ancestor {
    ! test -z "$(hg log -l 1 -r $1::$2)"
}

export -f is_ancestor

function do_fe_review {
    IRON_OPTIONS='((workspaces false))' fe review root 2>&1 >/dev/null | grep -v -F 'Received EOF' || true
}

export -f do_fe_review

function do_interactive_review {
    fe review -interactive true "$@"
}

export -f do_interactive_review

function show_catch_up {
    fe show -omit-review-sessions-in-progress-table \
        | sed -rn '/\| user .*\|/,$ p'
}

export -f show_catch_up

function with_visible_colors {
    IRON_OPTIONS="()" "$@" |
        sed \
            -e 's/│/|/g' \
            -e 's/┌/|/g' \
            -e 's/┐/|/g' \
            -e 's/└/|/g' \
            -e 's/┘/|/g' \
            -e 's/┼/|/g' \
            -e 's/├/|/g' \
            -e 's/┤/|/g' \
            -e 's/─/-/g' \
            -e 's/┬/-/g' \
            -e 's/┴/-/g' \
            -e 's/\[37m/<white>/g' \
            -e 's/\[36m/<cyan>/g' \
            -e 's/\[35m/<magenta>/g' \
            -e 's/\[34m/<blue>/g' \
            -e 's/\[33m/<yellow>/g' \
            -e 's/\[32m/<green>/g' \
            -e 's/\[31m/<red>/g' \
            -e 's/\[30m/<black>/g' \
            -e 's/\[0m/<off>/g' \
            -e 's/\[2m/<dim>/g' \
            ;
}

export -f with_visible_colors

# This makes bash the shell used to execute the test scripts.
# In particular, we'd like to define shell functions with - in their names in our
# test scripts, which sh would bar.
export HGTEST_SHELL=/bin/bash
